// Code generated by MockGen. DO NOT EDIT.
// Source: internal/wrap/mdns.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockMDNSService is a mock of MDNSService interface.
type MockMDNSService struct {
	ctrl     *gomock.Controller
	recorder *MockMDNSServiceMockRecorder
}

// MockMDNSServiceMockRecorder is the mock recorder for MockMDNSService.
type MockMDNSServiceMockRecorder struct {
	mock *MockMDNSService
}

// NewMockMDNSService creates a new mock instance.
func NewMockMDNSService(ctrl *gomock.Controller) *MockMDNSService {
	mock := &MockMDNSService{ctrl: ctrl}
	mock.recorder = &MockMDNSServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMDNSService) EXPECT() *MockMDNSServiceMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockMDNSService) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockMDNSServiceMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockMDNSService)(nil).Close))
}

// Start mocks base method.
func (m *MockMDNSService) Start() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start")
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start.
func (mr *MockMDNSServiceMockRecorder) Start() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockMDNSService)(nil).Start))
}
